import argparse
from copy import deepcopy
import gffutils
from JunctionAnnotator import Junction
import os
import pysam
import sys

class AnnotatedJunction(Junction):
    """ Subclass of Class Junction"""
    def __init__(self, line):
        sline = line.rstrip().split
        chrom = sline[0]
        strand = sline[5]
        start = self.thick_start + int(sline[10].split(',')[0])
        suepr(AnnotatedJunction, self).__init__(chrom,strand,start)
        self.thick_start = int(sline[1])
        self.thick_end = int(sline[2])
        self.name = sline[3]
        self.read_count = int(sline[4])
        self.score = sline[4]
        self.end = self.thick_start + int(sline[11].split(',')[1])
        self.left_anchor = True
        self.right_anchor = True
        self.donor_seq = ""
        self.acceptor_seq = ""
    
    def get_splice_site(self, fasta):
        donor_pos = [self.start + 1, self.start + 2]
        acceptor_pos = [self.end -2, self.end - 1]
        donor_seq = fasta.fetch(self.chrom, donor_pos[0], donor_pos[1]).upper()
        acceptor_seq = fasta.fetch(self.chrom, acceptor_pos[0], acceptor_pos[1]).upper()
        if self.strand == '-':
            base_dict = {
                'A': 'T',
                'C': 'G',
                'G': 'C',
                'T': 'A',
                'N': 'N'
            }
            donor_seq = [base_dict[i] for i in donor_seq]
            donor_seq = donor_seq[::-1]
            acceptor_seq = [base_dict[i] for i in acceptor_seq]
            acceptor_seq = acceptor_seq[::-1]
            donor_pos, acceptor_seq = acceptor_seq, donor_seq
        self.donor_seq = donor_seq
        self.acceptor_seq = acceptor_seq

        
        

def parse_opt():
    parser = argparse.ArgumentParser(description='Extract Junction Reads from bamfile')
    parser.add_argument('-a', '--anchor', type=int, default=8, help='mininum anchor length')
    parser.add_argument('-f', '--fastq', help='reference genome fasta file', required=True)
    parser.add_argument('-j', '--junc', help='input junction file generated by JunctExtractor', required=True)
    parser.add_argument('-i', '--mini', type=int, default=20, help='mininum intron length')
    parser.add_argument('-I', '--maxi', type=int, default=10000, help='maxinum intron length')
    parser.add_argument('-o', '--out', help='output file path')
    parser.add_argument('-r', '--region', help='junction reads from spcific regions')
    args = parser.parse_args()
    return args

def get_fasta_file(fastafile):
    try:
        fasta = pysam.FastaFile(fastafile)
    except FileNotFoundError:
        msg='%s not found!' % fastafile
        print(msg)
    except AttributeError:
        msg='index of %s not found' % fastafile
    else:
        return fasta

def get_annotation(gtffile):
    try:
        dbfn_prefix = os.path.splitext(os.path.basename(gtffile))[0]
        dbfn = os.getcwd() + '/' + dbfn_prefix+'.db'
        gtf = gffutils.create_db(fn, dbfn=dbfn, force=True, keep_order=False,
        merge_strategy='merge', sort_attribute_values=False)
        annotation_db = gffutils.FeatureDB(dbfn)
        return annotation_db
    except FileNotFoundError:
        msg='%s not found!' % gtffile
        print(msg)

def get_splice_site():
    return True

def annotate_junction(juncfile, anno, fasta):
    try:
        with open(juncfile) as junc:
            for line in junc:
                junc = Junction.init_from_file(line)
                junc.get_splice_site(fasta)
                
    
    return True



if __name__ == '__main__':
    args = parse_opt()
    fasta = get_fasta_file(args.fasta)
    anno = get_annotation(args.gtf)
    annotate_junction(args.junc, anno, fasta)


